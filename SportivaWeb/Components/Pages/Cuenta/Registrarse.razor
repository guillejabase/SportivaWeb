@layout CuentaLayout
@page "/cuenta/registrarse"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Data.SqlClient
@using SportivaWeb.Components.Layout
@using SportivaWeb.Models.DB
@inject IConfiguration configuration
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Sportiva - Registrarse</PageTitle>

<FluentStack Orientation="Orientation.Vertical"
			 HorizontalAlignment="HorizontalAlignment.Center">
	<h1>Registrarse</h1>

	<FluentStack Width="auto">
		<FluentStack Orientation="Orientation.Vertical"
					 Style="align-items: end;">
			<FluentLabel Weight="FontWeight.Bold" MarginBlock="6px">
				Email:
			</FluentLabel>
			<FluentLabel Weight="FontWeight.Bold" MarginBlock="6px">
				Contraseña:
			</FluentLabel>
			<FluentLabel Weight="FontWeight.Bold" MarginBlock="6px">
				Confirmación de contraseña:
			</FluentLabel>
		</FluentStack>

		<FluentStack Orientation="Orientation.Vertical">
			<FluentTextField Style="width: inherit;"
							 @bind-Value="usuario.Email" />
			<FluentTextField TextFieldType="TextFieldType.Password"
							 Style="width: inherit;"
							 @bind-Value="usuario.Contra" />
			<FluentTextField TextFieldType="TextFieldType.Password"
							 Style="width: inherit;"
							 @bind-Value="confirmacion" />

			<FluentSpacer />

			<FluentStack VerticalAlignment="VerticalAlignment.Center"
						 Width="max-content">
				<FluentButton Appearance="Appearance.Accent"
							  @onclick="RegistrarUsuarioAsync">
					Registrarse
				</FluentButton>

				<span>Ya tenés cuenta? <a href="@link">Iniciá sesión</a></span>
			</FluentStack>
		</FluentStack>
	</FluentStack>

	<FluentSpacer />

	@if (!string.IsNullOrEmpty(mensaje))
	{
		<span>@mensaje</span>
	}
</FluentStack>

@code {
	private UsuarioModel usuario = new();
	private string confirmacion = string.Empty;
	private string link = "/cuenta/iniciar-sesion";
	private string? mensaje;

	private async Task RegistrarUsuarioAsync()
	{
		mensaje = string.Empty;

		var context = new ValidationContext(usuario);
		var results = new List<ValidationResult>();

		if (!Validator.TryValidateObject(usuario, context, results, true))
		{
			mensaje = string.Join("\n", results.Select(r => r.ErrorMessage));
			return;
		}
		if (string.IsNullOrEmpty(confirmacion))
		{
			mensaje = "Confirme la contraseña.";
			return;
		}
		if (confirmacion != usuario.Contra)
		{
			mensaje = "La confirmación de contraseña no coincide con la misma.";
			return;
		}

		using var conexion = new SqlConnection(configuration.GetConnectionString("DefaultConnection"));

		await conexion.OpenAsync();

		using var emailComando = new SqlCommand($"SELECT COUNT(*) FROM Usuarios WHERE Email = @Email", conexion);

		emailComando.Parameters.AddWithValue("@Email", usuario.Email);

		if (Convert.ToInt32(await emailComando.ExecuteScalarAsync()) > 0)
		{
			mensaje = "El correo ya está registrado.";
			return;
		}

		using var usuarioComando = new SqlCommand("INSERT INTO Usuarios (Email, Contra) VALUES (@Email, @Contra)", conexion);

		usuarioComando.Parameters.AddWithValue("@Email", usuario.Email);
		usuarioComando.Parameters.AddWithValue("@Contra", usuario.Contra);

		await usuarioComando.ExecuteNonQueryAsync();

		mensaje = "Usuario registrado correctamente. Redirigiendo al inicio de sesión...";
		StateHasChanged();

		await Task.Delay(1000);
		navigationManager.NavigateTo(link);
	}
}
