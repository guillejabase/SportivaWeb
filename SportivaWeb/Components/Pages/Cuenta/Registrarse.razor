@layout CuentaLayout
@page "/cuenta/registrarse"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Data.SqlClient
@using SportivaWeb.Components.Layout
@using SportivaWeb.Models.DB
@inject IConfiguration configuration
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Sportiva - Registrarse</PageTitle>

<!-- #region Contenedor --> 
<FluentStack Orientation="Orientation.Vertical"
			 HorizontalAlignment="HorizontalAlignment.Center">
	<h1>Iniciar sesión</h1>

	<FluentSpacer />

	<!-- #region Etiquetas y campos --> 
	<FluentStack Width="fit-content">
		<!-- Etiquetas -->
		<FluentStack Orientation="Orientation.Vertical"
					 Width="fit-content"
					 Style="align-items: end;">
			<FluentLabel Weight="FontWeight.Bold" MarginBlock="6px"  Style="font-size: 20px;">
				Email:
			</FluentLabel>
			<FluentLabel Weight="FontWeight.Bold" MarginBlock="6px" Style="font-size: 20px;">
				Contraseña:
			</FluentLabel>
		</FluentStack>

		<!-- Campos -->
		<FluentStack Orientation="Orientation.Vertical">
			<FluentTextField Style="font-size: 20px;"
							 @bind-Value="usuario.Email" />
			<FluentTextField TextFieldType="TextFieldType.Password"
							 Style="font-size: 20px;"
							 @bind-Value="usuario.Contra" />
		</FluentStack>
	</FluentStack>
	<!-- #endregion -->

	<FluentSpacer />

	<!-- #region Botón y guía --> 
	<FluentStack VerticalAlignment="VerticalAlignment.Center"
				 HorizontalAlignment="HorizontalAlignment.Right"
				 Width="fit-content">
		<FluentButton Appearance="Appearance.Accent"
					  Style="font-size: 20px;"
					  @onclick="IniciarSesionUsuario">
			Registrarse
		</FluentButton>

		<span>Ya tenés cuenta? <a href="/cuenta/iniciar-sesion">Iniciá sesión</a></span>
	</FluentStack>
	<!-- #endregion -->

	<FluentSpacer />

	<!-- #region Mensaje --> 
	@if (!string.IsNullOrEmpty(mensaje))
	{
		<span>@mensaje</span>
	}
	<!-- #endregion -->
</FluentStack>
<!-- #endregion -->

@code {
	private Usuario usuario = new();
	private string? mensaje;

	private async Task IniciarSesionUsuario()
	{
		// Limpiar el mensaje por cada acción del botón
		mensaje = string.Empty;

		#region Validación en el modelo
		// Obtener mensaje en caso de ingresar mal los campos
		var context = new ValidationContext(usuario);
		var results = new List<ValidationResult>();

		if (!Validator.TryValidateObject(usuario, context, results, true))
		{
			// Ejemplo: "Ingrese email. Ingrese contraseña."
			mensaje = string.Join("\n", results.Select(r => r.ErrorMessage));
			return;
		}
		#endregion

		#region Validación en la base de datos 
		using (var conexion = new SqlConnection(configuration.GetConnectionString("DefaultConnection")))
		{
			await conexion.OpenAsync();

			// Existencia del email
			using (var emailComando = new SqlCommand($"SELECT COUNT(*) FROM Usuarios WHERE Email = @Email", conexion))
			{
				emailComando.Parameters.AddWithValue("@Email", usuario.Email);

				if (Convert.ToInt32(await emailComando.ExecuteScalarAsync()) > 0)
				{
					mensaje = "El correo ya está registrado.";
					return;
				}
			}

			// Inserción de datos			
			using (var usuarioComando = new SqlCommand("INSERT INTO Usuarios (Email, Contra) VALUES (@Email, @Contra)", conexion))
			{
				usuarioComando.Parameters.AddWithValue("@Email", usuario.Email);
				usuarioComando.Parameters.AddWithValue("@Contra", usuario.Contra);

				await usuarioComando.ExecuteNonQueryAsync();
			}
		}

		// Ir a la página de iniciar sesión al registrarse
		mensaje = "Usuario registrado correctamente. Redirigiendo al inicio de sesión...";
		StateHasChanged();

		await Task.Delay(2000);
		navigationManager.NavigateTo("/cuenta/iniciar-sesion");
	}
}


@* <FluentStack Orientation="Orientation.Vertical"
			 HorizontalAlignment="HorizontalAlignment.Center">
	<h3>Registrarse</h3>

	<FluentSpacer />

	<FluentStack Orientation="Orientation.Horizontal"
				 Width="fit-content">
		<FluentStack Orientation="Orientation.Vertical"
					 Width="fit-content"
					 Style="align-items: end;">
			<FluentLabel Style="font-weight: bold; margin: 6px 0;">
				Email:
			</FluentLabel>
			<FluentLabel Style="font-weight: bold; margin: 6px 0;">
				Contraseña:
			</FluentLabel>
		</FluentStack>

		<FluentStack Orientation="Orientation.Vertical">
			<FluentTextField @bind-Value="usuario.Email" />
			<FluentTextField TextFieldType="TextFieldType.Password"
							 @bind-Value="usuario.Contra" />
		</FluentStack>
	</FluentStack>

	<FluentSpacer />

	<FluentStack Orientation="Orientation.Horizontal"
				 VerticalAlignment="VerticalAlignment.Center"
				 HorizontalAlignment="HorizontalAlignment.Right"
				 Width="fit-content">
		<FluentButton Appearance="Appearance.Accent"
					  @onclick="RegistrarUsuario">
			Registrarse
		</FluentButton>

		<span style="font-size: 12px;">Ya tenés cuenta? <a href="/cuenta/iniciar-sesion">Iniciá sesión</a></span>
	</FluentStack>

	<FluentSpacer />

	@if (!string.IsNullOrEmpty(mensaje))
	{
		<span>@mensaje</span>
	}
</FluentStack>

@code {
	private Usuario usuario = new();
	private string? mensaje;

	private async Task RegistrarUsuario()
	{
		mensaje = string.Empty;

		var context = new ValidationContext(usuario);
		var results = new List<ValidationResult>();

		if (!Validator.TryValidateObject(usuario, context, results, true))
		{
			mensaje = string.Join("\n", results.Select(r => r.ErrorMessage));
			return;
		}
		using (var conexion = new SqlConnection(configuration.GetConnectionString("DefaultConnection")))
		{
			await conexion.OpenAsync();

			var usuarioExiste = false;

			using (var emailComando = new SqlCommand($"SELECT COUNT(*) FROM Usuarios WHERE Email = @Email", conexion))
			{
				emailComando.Parameters.AddWithValue("@Email", usuario.Email);

				usuarioExiste = Convert.ToInt32(await emailComando.ExecuteScalarAsync()) > 0;
			}

			if (usuarioExiste)
			{
				mensaje = "El correo ya está registrado.";
				return;
			}

			using (var usuarioComando = new SqlCommand("INSERT INTO Usuarios (Email, Contra) VALUES (@Email, @Contra)", conexion))
			{
				usuarioComando.Parameters.AddWithValue("@Email", usuario.Email);
				usuarioComando.Parameters.AddWithValue("@Contra", usuario.Contra);

				await usuarioComando.ExecuteNonQueryAsync();
			}
		}

		mensaje = "Usuario registrado correctamente. Redirigiendo al inicio de sesión...";
		StateHasChanged();

		await Task.Delay(2000);
		navigationManager.NavigateTo("/cuenta/iniciar-sesion");
	}
} *@
