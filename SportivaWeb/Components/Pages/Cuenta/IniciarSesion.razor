@layout CuentaLayout
@page "/cuenta/iniciar-sesion"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Data.SqlClient
@using SportivaWeb.Components.Layout
@using SportivaWeb.Models.DB
@inject IConfiguration configuration
@inject NavigationManager navigationManager
@rendermode InteractiveServer

<PageTitle>Sportiva - Iniciar sesión</PageTitle>

<!-- #region Contenedor --> 
<FluentStack Orientation="Orientation.Vertical"
			 HorizontalAlignment="HorizontalAlignment.Center">
	<h1>Iniciar sesión</h1>

	<FluentSpacer />

	<!-- #region Etiquetas y campos --> 
	<FluentStack Width="fit-content">
		<!-- Etiquetas -->
		<FluentStack Orientation="Orientation.Vertical"
					 Width="fit-content"
					 Style="align-items: end;">
			<FluentLabel Weight="FontWeight.Bold" MarginBlock="6px"  Style="font-size: 20px;">
				Email:
			</FluentLabel>
			<FluentLabel Weight="FontWeight.Bold" MarginBlock="6px" Style="font-size: 20px;">
				Contraseña:
			</FluentLabel>
		</FluentStack>

		<!-- Campos -->
		<FluentStack Orientation="Orientation.Vertical">
			<FluentTextField Style="font-size: 20px;"
							 @bind-Value="usuario.Email" />
			<FluentTextField TextFieldType="TextFieldType.Password"
							 Style="font-size: 20px;"
							 @bind-Value="usuario.Contra" />
		</FluentStack>
	</FluentStack>
	<!-- #endregion -->

	<FluentSpacer />

	<!-- #region Botón y guía --> 
	<FluentStack VerticalAlignment="VerticalAlignment.Center"
				 HorizontalAlignment="HorizontalAlignment.Right"
				 Width="fit-content">
		<FluentButton Appearance="Appearance.Accent"
					  Style="font-size: 20px;"
					  @onclick="IniciarSesionUsuario">
			Iniciar sesión
		</FluentButton>

		<span>No tenés cuenta? <a href="/cuenta/registrarse">Regístrate</a></span>
	</FluentStack>
	<!-- #endregion -->

	<FluentSpacer />

	<!-- #region Mensaje --> 
	@if (!string.IsNullOrEmpty(mensaje))
	{
		<span>@mensaje</span>
	}
	<!-- #endregion -->
</FluentStack>
<!-- #endregion -->

@code {
	private Usuario usuario = new();
	private string? mensaje;

	private async Task IniciarSesionUsuario()
	{
		// Limpiar el mensaje por cada acción del botón
		mensaje = string.Empty;

		#region Validación en el modelo 
		if (string.IsNullOrEmpty(usuario.Email) || string.IsNullOrEmpty(usuario.Contra))
		{
			mensaje = string.IsNullOrEmpty(usuario.Email) ? "Ingrese email." : string.;
			return;
		}
		#endregion

		#region Validación en la base de datos 
		using (var conexion = new SqlConnection(configuration.GetConnectionString("DefaultConnection")))
		{
			await conexion.OpenAsync();

			var select = "SELECT COUNT(1) FROM Usuarios";

			// Existencia del email
			using (var emailComando = new SqlCommand($"{select} WHERE Email = @Email", conexion))
			{
				emailComando.Parameters.AddWithValue("@Email", usuario.Email);

				if (Convert.ToInt32(await emailComando.ExecuteScalarAsync()) == 0)
				{
					mensaje = "Este email no está registrado.";
					return;
				}
			}

			// Concidencia con la contraseña del email ingresado
			using (var contraComando = new SqlCommand($"{select} WHERE Email = @Email AND Contra = @Contra", conexion))
			{
				contraComando.Parameters.AddWithValue("@Email", usuario.Email);
				contraComando.Parameters.AddWithValue("@Contra", usuario.Contra);

				if (Convert.ToInt32(await contraComando.ExecuteScalarAsync()) == 0)
				{
					mensaje = "La contraseña es incorrecta.";
					return;
				}
			}
		}
		#endregion

		// Ir a la página de inicio al iniciar sesión 
		mensaje = "Sesión iniciada. Dirigiendo al inicio...";
		StateHasChanged();

		await Task.Delay(2000);
		navigationManager.NavigateTo("/");
	}
}
