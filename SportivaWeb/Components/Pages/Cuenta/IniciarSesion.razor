@layout CuentaLayout
@page "/cuenta/iniciar-sesion"
@using System.ComponentModel.DataAnnotations
@using Microsoft.Data.SqlClient
@using SportivaWeb.Components.Layout
@using SportivaWeb.Models.DB
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Sportiva - Iniciar sesión</PageTitle>

<FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Center">
	<h3>Iniciar sesión</h3>

	<FluentSpacer />

	<FluentStack Orientation="Orientation.Horizontal" Width="fit-content">
		<FluentStack Orientation="Orientation.Vertical" Width="fit-content" Style="align-items: end;">
			<FluentLabel Style="font-weight: bold; margin: 6px 0;">
				Email:
			</FluentLabel>
			<FluentLabel Style="font-weight: bold; margin: 6px 0;">
				Contraseña:
			</FluentLabel>
		</FluentStack>

		<FluentStack Orientation="Orientation.Vertical">
			<FluentTextField @bind-Value="Usuario.Email" />
			<FluentTextField TextFieldType="TextFieldType.Password"
							 @bind-Value="Usuario.Contra" />
		</FluentStack>
	</FluentStack>

	<FluentSpacer />

	<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center" HorizontalAlignment="HorizontalAlignment.Right" Width="fit-content">
		<FluentButton Appearance="Appearance.Accent" @onclick="IniciarSesionUsuario">
			Iniciar sesión
		</FluentButton>

		<span style="font-size: 12px;">No tenés cuenta? <a href="/cuenta/registrarse">Regístrate</a></span>
	</FluentStack>

	<FluentSpacer />

	@if (!string.IsNullOrEmpty(Mensaje))
	{
		<span>@Mensaje</span>
	}
</FluentStack>

@code {
	private Usuario Usuario = new();
	private string? Mensaje = string.Empty;

	private async Task IniciarSesionUsuario()
	{
		Mensaje = string.Empty;

		var contexto = new ValidationContext(Usuario);
		var resultados = new List<ValidationResult>();

		if (!Validator.TryValidateObject(Usuario, contexto, resultados, true))
		{
			Mensaje = string.Join("\n", resultados.Select(r => r.ErrorMessage));
			return;
		}
		else
		{
			using (var conexion = new SqlConnection(Configuration.GetConnectionString("DefaultConnection")))
			{
				await conexion.OpenAsync();

				using (var emailComando = new SqlCommand("SELECT COUNT(1) FROM Usuarios WHERE Email = @Email", conexion))
				{
					emailComando.Parameters.AddWithValue("@Email", Usuario.Email);

					if (Convert.ToInt32(await emailComando.ExecuteScalarAsync()) == 0)
					{
						Mensaje = "Este email no está registrado.";
						return;
					}
				}
				using (var contraComando = new SqlCommand("SELECT COUNT(1) FROM Usuarios WHERE Email = @Email AND Contra = @Contra", conexion))
				{
					contraComando.Parameters.AddWithValue("@Email", Usuario.Email);
					contraComando.Parameters.AddWithValue("@Contra", Usuario.Contra);

					if (Convert.ToInt32(await contraComando.ExecuteScalarAsync()) == 0)
					{
						Mensaje = "La contraseña es incorrecta.";
						return;
					}
				}
			}
		}

		Mensaje = "Sesión iniciada. Redirigiendo al inicio...";
		StateHasChanged();

		await Task.Delay(2000);
		NavigationManager.NavigateTo("/");
	}
}
