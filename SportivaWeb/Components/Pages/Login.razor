@page "/login"
@using Microsoft.Data.SqlClient
@using SportivaWeb.Models
@using System.ComponentModel.DataAnnotations
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Sportiva - Iniciar sesión</PageTitle>

<h1>Iniciar sesión</h1>

<FluentStack Orientation="Orientation.Vertical">
	<FluentTextField Label="Email" @bind-Value="User.Email" />
	<FluentSpacer />

	<FluentTextField Label="Contraseña" TextFieldType="TextFieldType.Password" @bind-Value="User.Password" />
	<FluentSpacer />

	<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
		<FluentButton Appearance="Appearance.Accent" @onclick="LoginUser">
			Iniciar sesión
		</FluentButton>

		<p style="font-size: 12px; margin: 0;">No tenés cuenta? <a href="/register">Regístrate</a></p>
	</FluentStack>

	<FluentSpacer />

	@if (!string.IsNullOrEmpty(Message))
	{
		<p>@Message</p>
	}
</FluentStack>

@code {
	private User User = new();
	private string Message = string.Empty;

	private async Task LoginUser()
	{
		Message = string.Empty;

		var context = new ValidationContext(User);
		var results = new List<ValidationResult>();

		if (!Validator.TryValidateObject(User, context, results, true))
		{
			Message = string.Join("\n", results.Select(r => r.ErrorMessage));
			return;
		}
		else
		{
			using (var connection = new SqlConnection(Configuration.GetConnectionString("DefaultConnection")))
			{
				await connection.OpenAsync();

				using (var checkEmailCommand = new SqlCommand("SELECT COUNT(1) FROM Users WHERE Email = @Email", connection))
				{
					checkEmailCommand.Parameters.AddWithValue("@Email", User.Email);

					if (Convert.ToInt32(await checkEmailCommand.ExecuteScalarAsync()) == 0)
					{
						Message = "El correo no está registrado.";
						return;
					}
				}
				using (var checkPasswordCommand = new SqlCommand("SELECT COUNT(1) FROM Users WHERE Email = @Email AND Password = @Password", connection))
				{
					checkPasswordCommand.Parameters.AddWithValue("@Email", User.Email);
					checkPasswordCommand.Parameters.AddWithValue("@Password", User.Password);

					if (Convert.ToInt32(await checkPasswordCommand.ExecuteScalarAsync()) == 0)
					{
						Message = "La contraseña es incorrecta.";
						return;
					}
				}
			}
		}

		Message = "Sesión iniciada. Redirigiendo al inicio...";
		StateHasChanged();

		await Task.Delay(2000);
		NavigationManager.NavigateTo("/");
	}
}
