@page "/register"
@using Microsoft.Data.SqlClient
@using SportivaWeb.DTOs
@using SportivaWeb.Models
@using System.ComponentModel.DataAnnotations
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Sportiva - Registrar cuenta</PageTitle>

<h1>Registrar cuenta</h1>

<FluentStack Orientation="Orientation.Vertical">
    <FluentTextField Label="Email" @bind-Value="UserData.Email" />
    <FluentSpacer />
    <FluentTextField Label="Contraseña" TextFieldType="TextFieldType.Password" @bind-Value="UserData.Password" />
    <FluentSpacer />
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentButton Appearance="Appearance.Accent" @onclick="RegisterData">Registrar</FluentButton>
        <p style="font-size: 12px; margin: 0;">Ya tienes cuenta? <a href="/login">Iniciá sesión</a></p>
    </FluentStack>
    <FluentSpacer />

    @if (!string.IsNullOrEmpty(Message))
    {
        <p>@Message</p>
    }
</FluentStack>

@code {
    private UserDTO UserData = new();
    private string? Message = string.Empty;

    private async Task RegisterData()
    {
        Message = string.Empty;

        var context = new ValidationContext(UserData);
        var results = new List<ValidationResult>();

        if (!Validator.TryValidateObject(UserData, context, results, true))
        {
            Message = string.Join("\n", results.Select(result => result.ErrorMessage));
            return;
        }
        using (var connection = new SqlConnection(Configuration.GetConnectionString("DefaultConnection")))
        {
            await connection.OpenAsync();

            bool exists = false;

            using (var command = new SqlCommand("SELECT COUNT(*) FROM Users WHERE Email = @Email", connection))
            {
                command.Parameters.AddWithValue("@Email", UserData.Email);

                exists = Convert.ToInt32(await command.ExecuteScalarAsync()) > 0;
            }

            if (exists)
            {
                Message = "El email ya está registrado.";
                return;
            }

            using (var command = new SqlCommand("INSERT INTO Users (Email, Password) VALUES (@Email, @Password)", connection))
            {
                command.Parameters.AddWithValue("@Email", UserData.Email);
                command.Parameters.AddWithValue("@Password", UserData.Password);

                await command.ExecuteNonQueryAsync();
            }
        }

        Message = "Usuario registrado correctamente. Redirigiendo al inicio de sesión...";
        StateHasChanged();

        await Task.Delay(2000);
        NavigationManager.NavigateTo("/login");
    }
}
