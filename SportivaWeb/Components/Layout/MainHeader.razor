@implements IDisposable
@inject ISesionService sesionService
@inject NavigationManager navigationManager
@using SportivaWeb.Services
@rendermode InteractiveServer

<FluentDesignTheme @bind-Mode="modo"
                   CustomColor="#00FFE0" />

<FluentHeader>
    <FluentStack Orientation="Orientation.Horizontal"
                 VerticalAlignment="VerticalAlignment.Center">
        <a href="@(sesionService.Usuario?.Rol == 1 ? "/menu/usuarios" : (sesionService.Usuario?.Rol == 2 ? "/menu/eventos" : "/"))"
           style="text-decoration: none; color: var(--neutral-layer-1); font-size: 24px">
            Sportiva
        </a>

        <FluentSpacer />

        @if (ruta != "cuenta/iniciar-sesion" && ruta != "cuenta/registrarse")
        {
            if (sesionService.Usuario == null)
            {
                <FluentIcon Value="@(new Icons.Regular.Size24.Person())"
                            Color="Color.Lightweight"
                            Title="Iniciar sesión"
                            @onclick="@(() => navigationManager.NavigateTo("/cuenta/iniciar-sesion"))" />
            }
            else
            {
                <span style="font-weight: normal">
                    @sesionService.Usuario.Nombre / @sesionService.Usuario.Email
                </span>

                <FluentIcon Value="@(new Icons.Regular.Size24.ArrowForwardDownPerson())"
                            Color="Color.Lightweight"
                            Title="Cerrar sesión"
                            @onclick="CerrarSesion" />
            }
        }

        <FluentIcon Value="@(modo == DesignThemeModes.Dark ? (Icon)new Icons.Regular.Size24.WeatherSunny() : (Icon)new Icons.Regular.Size24.WeatherMoon())"
                    Color="Color.Lightweight"
                    Title="@(modo == DesignThemeModes.Dark ? "Modo claro" : "Modo oscuro")"
                    @onclick="@(() => modo = modo == DesignThemeModes.Dark ? DesignThemeModes.Light : DesignThemeModes.Dark)" />
    </FluentStack>
</FluentHeader>

@code {
    private DesignThemeModes modo = DesignThemeModes.Light;
    private string ruta => navigationManager.ToBaseRelativePath(navigationManager.Uri);

    private void EnUbicacionCambiada(object? sender, LocationChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void SesionCambiada()
    {
        InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        navigationManager.LocationChanged += EnUbicacionCambiada;
        sesionService.EnSesionCambiada += SesionCambiada;
    }

    public void Dispose()
    {
        navigationManager.LocationChanged -= EnUbicacionCambiada;
        sesionService.EnSesionCambiada -= SesionCambiada;
    }

    private void CerrarSesion()
    {
        sesionService.Cerrar();
        navigationManager.NavigateTo("/cuenta/sesion-cerrada");
    }
}
